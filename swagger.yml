swagger: '2.0'

info:
  version: "0.0.3"
  title: Outcome Measures Self Service System REST API
  contact:
    name: OMSSS REST API Support
    url: https://docs.omsss.online/
    email: support@omsss.online
  x-logo:
    url: https://staging.omsss.online/assets/logo.png
    backgroundColor: #FFFFFF
    altText: OMSSS Logo
  description: |
    # Introduction

    Welcome to the reference for the Outcome Measures Self Service System (OMSSS) REST API.

    For a description of the OMSSS system please refer to the [OMSSS documentation](https://docs.omsss.online/) website.

    The OMSSS REST API enables Outcome Measure integration into client management systems. It has been developed by [Strategic Data Pty. Ltd.](https://www.strategicdata.com.au/) on behalf of the Australian [Department of Health](https://health.gov.au/) as part of the [Primary Mental Health Care Minimum Data Set](https://pmhc-mds.com) (PMHC MDS). Although it was originally developed as part of the PMHC MDS project it can also be used to collection outcome measure data that is not subject to the data collection requirements of the PMHC MDS.

    Please send any feedback or questions about this API to support@omsss.online.

    # Access to the API

    In order to obtain an account to access the OMSSS REST API, please contact support@omsss.online.

    The OMSSS REST API is available at the following endpoints:

    | Instance    | Base URL for REST Endpoints          |
    |-------------|--------------------------------------|
    | Production  | https://omsss.online/api/            |
    | Developers  | https://developers.omsss.online/api/ |

    The Production instance provides access to your live data. The Developers instance runs the same version of OMSSS as the Production instance, but can be used to test your code without affecting your live data.

    Your login will give you access to both instances.

    # Authentication

    FILL IN AUTHENTICATION INFORMATION HERE

    <!-- ReDoc-Inject: <security-definitions> -->

    # Definitions

    | Term                | Meaning                                                                                  |
    |---------------------|------------------------------------------------------------------------------------------|
    | Client              | The person who is receiving the psychological service.                                   |
    | Measure             | A diagnostic tool used in healthcare. In the case of OMSSS these are all questionnaires. |
    | Collection          | An instance of a **measure** assigned to a particular **client**.                        |
    | Registration System | A third party system (including the PMHC MDS) that has an API connection to OMSSS.       |

    # Process

    # Requesting a new Collection

    <img alt="Requesting a new collection from OMSSS REST API" src="https://docs.pmhc-mds.com/_images/data-model.svg" /><p class="caption"><span class="caption-text">Requesting a new collection from OMSSS REST API</span></p>

    In order to create a new collection in OMSSS the Registration System sends
    a request to the OMSSS system using the REST API endpoint <a href="#operation/Collection::create">POST /collection</a> .


    # API Changelog

    | Date     | Changes                                 |
    |----------|-----------------------------------------|
    | 1/1/2019 | Version 0.0.3 released                  |

tags:
- name: "operations"
  x-displayName: "Operations"
  description: "Operational End Points"
- name: "external"
  x-displayName: "External"
  description: "End points available to integrators"
- name: "internal"
  x-displayName: "Internal"
  description: "**FOR INTERNAL USE ONLY**"


securityDefinitions:
  application_id:
    type: apiKey
    name: auth-id
    in: header
    description: |
      auth-id description here.
  secret:
    type: apiKey
    name: auth-secret
    in: header



basePath: /api

paths:

#----------------------------------------------------------------------
# Operational
#----------------------------------------------------------------------

  /version:
    get:
      tags:
      - "operations"
      summary: "version"
      description: |
        OMSSS API version information in the form x.y.z.

        - A change in the first digit can break backwards compatability.
        - The second digit implies new functionality.
        - The third digit is a patch release.
      operationId: "Root::version"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          examples:
            application/json:
            - git:
                tag: v0.1.1
                sha: c80bb751479f8cab2fa2e6e6168f7ada90b73e92
                date: Fri Nov 9 16:20:58 2018
              built: Fri  9 Nov 2018 16:24:07 AEDT
          schema:
            description: ''
            type: array
            items:
              $ref: '#/definitions/VersionResponse'
      x-code-samples:
      - lang: curl
        source: |-
          curl "https://omsss.online/api/version"
      - lang: perl
        source: |-
          my $response = Furl->new()->get(
            "https://omsss.online/api/version"
          );
  /ping:
    get:
      tags:
      - "operations"
      summary: "ping"
      description: "The application will respond with a success message indicating it is running."
      operationId: "Root::ping"
      produces:
      - "string"
      responses:
        200:
          description: "Successful operation"
          examples:
            string:
              Ok
      x-code-samples:
      - lang: curl
        source: |-
          curl "https://omsss.online/api/ping"
      - lang: perl
        source: |-
          my $response = Furl->new()->get(
            "https://omsss.online/api/ping"
          );
  /health-check:
    get:
      tags:
      - "operations"
      summary: "health-check"
      description: |
        OMSSS API health-check. Health checks routines ensure all aspects of
        the application are performing at expected levels.
      operationId: "Root::health_check"
      produces:
      - "string"
      responses:
        200:
          description: "Successful operation"
          examples:
            string:
              Ok
      x-code-samples:
      - lang: curl
        source: |-
          curl "https://omsss.online/api/health-check"
      - lang: perl
        source: |-
          my $response = Furl->new()->get(
            "https://omsss.online/api/health-check"
          );

#----------------------------------------------------------------------
# External
#----------------------------------------------------------------------

  /collection:
    post:
      summary: "collection"
      description:
        Use /collection to request a link to an instance of a measure that is
        assigned to a particular client.
      tags:
      - external
      security:
      - application_id: []
        secret: []
      operationId: "Collection::create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/CollectionLinkRequest"
      - name: "include_qrcode_image"
        in: "query"
        description: "Set to true to include the QR code as a data-url in the response."
        required: false
        type: "boolean"
      responses:
        200:
          description: Successful response
          schema:
            $ref: "#/definitions/CollectionLinkResponse"
          examples:
            application/json:
              uuid: fa9bf0fc-d055-4f75-b74f-30ae490609f5
              shortcode: RMA1A60
              url: https://omsss.online/#/RMA1A60
              qr_code_url: https://omsss.online/api/collection/RMA1A60/qr
        400:
          description: Invalid input
          schema:
            $ref: "#/definitions/Error"
      x-code-samples:
      - lang: curl
        source: |-
          curl -X POST -H "Content-Type: application/json" -H "auth-id: your-auth-id" -H "auth-secret: your-auth-secret" -d '{"measure":"k5","postback_url":"https://api.your.service/pingback","payload":""}' "https://omsss.online/api/collection?include_qr_code=1"
      - lang: perl
        source: |-
          tie my %token, 'Hash::Ordered', (
            client_id => 'unique_client_id',
          );
          my $payload = Crypt::JWT::encode_jwt(
            payload => \%token,
            key     => 'sample_key',
            alg     => 'HS256'
          );
          my $body = +{
            measure      => 'k5',
            postback_url => 'postback_uri',
            payload      => $payload,
            sms          => '0419 123 456'',
            email        => 'example@example.com',
          };
          my ($response, $decoded);
          try {
            $response = Furl->new()->post(
              "https://omsss.online/api/collection",
              [
                'auth-id'      => $omsss_auth_id,
                'auth-secret'  => $omsss_secret,
                'Content-Type' => 'application/json',
              ],
              ( defined $body ? Cpanel::JSON::XS::encode_json($body) : () )
            );
            if ( $response->is_success ) {
              $decoded = length $response->content
                       ? Cpanel::JSON::XS::decode_json($response->content)
                       : '';
            }
          }
          catch {
            $message .= ": $_";
          };

  /collection/{uuid}/result:
    get:
      tags:
      - "external"
      summary: "collection/{uuid}/result"
      description: "Retrieve a submitted data collection."
      security:
      - application_id: []
        secret: []
      operationId: "Collection::result"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "uuid"
        description: "UUID of collection to retrieve."
        required: true
        type: "string"
      responses:
        200:
          description: "Completed Collection"
          schema:
            $ref: "#/definitions/CompleteCollection"
        400:
          description: "Validation exception"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Collection not found"
          schema:
            $ref: "#/definitions/Error"

  /collection/{uuid}/notify:
    post:
      tags:
      - "external"
      security:
      - application_id: []
        secret: []
      summary: "Send a submitted data collection report to the clinician"
      operationId: "Collection::notify"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "uuid"
        description: "UUID of outcome measure to report on"
        required: true
        type: "string"
      - name: "body"
        in: body
        required: true
        description: "Email address to send the report to"
        schema:
          type: array
          items:
            type: string
      responses:
        204:
          description: "Report Sent"
        400:
          description: "Validation exception"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Collection not found"
          schema:
            $ref: "#/definitions/Error"

  /collection/{uuid}:
    delete:
      tags:
      - "external"
      security:
      - application_id: []
        secret: []
      summary: "Immediately expire a data collection"
      operationId: "Collection::expire"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "uuid"
        description: "UUID of collection to retrieve"
        required: true
        type: "string"
      responses:
        204:
          description: "Collection expired"
        400:
          description: "Validation exception"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Collection not found"
          schema:
            $ref: "#/definitions/Error"

  /collection/{shortcode}/qr:
    get:
      tags:
      - "external"
      summary: Returns a QR code representation of the link to the collection
      operationId: "Collection::qr_code"
      produces:
        - image/png
      parameters:
        - name: "shortcode"
          in: "path"
          description: "Shortcode of collection to return"
          required: true
          type: "string"
      responses:
        200:
          description: OK
          schema:
            type: file
        404:
          description: "Collection not found"
          schema:
            $ref: "#/definitions/Error"

#----------------------------------------------------------------------
# Internal
#----------------------------------------------------------------------

  /measure/{measure}:
    get:
      tags:
      - "internal"
      summary: "Retrieve the metadata and questions for a measure"
      operationId: "Measure::getMeasure"
      produces:
      - "application/json"
      parameters:
        - name: "measure"
          in: "path"
          description: "Code of outcome measure to return"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/Measure"
        404:
          description: "Measure not found"
          schema:
            $ref: "#/definitions/Error"


  /collection/{shortcode}:
    get:
      tags:
      - "internal"
      summary: "Find a data collection by it's shortcode"
      description: "Returns a single data collection"
      operationId: "Collection::retrieve"
      produces:
      - "application/json"
      parameters:
        - name: "shortcode"
          in: "path"
          description: "Shortcode of collection to return"
          required: true
          type: "string"
        - name: "include_measure"
          in: "query"
          description: "Set to true to include the measure in the response"
          required: false
          type: "boolean"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/Collection"
        404:
          description: "Collection not found"
          schema:
            $ref: "#/definitions/Error"

    patch:
      tags:
      - "internal"
      summary: "Update an existing data collection"
      operationId: "Collection::update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "shortcode"
        description: "Shortcode of outcome measure to be update"
        required: true
        type: "string"
      - name: "body"
        in: body
        required: true
        description: "Answers to be saved"
        schema:
          type: array
          items:
            $ref: '#/definitions/CollectionAnswer'
      responses:
        204:
          description: "Collection updated with new answers"
        400:
          description: "Validation exception"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Collection not found"
          schema:
            $ref: "#/definitions/Error"

    put:
      tags:
      - "internal"
      summary: "Submit an existing data collection"
      operationId: "Collection::submit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "shortcode"
        description: "Shortcode of outcome measure to be update"
        required: true
        type: "string"
      responses:
        204:
          description: "Collection submitted"
        400:
          description: "Validation exception"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Collection not found"
          schema:
            $ref: "#/definitions/Error"

  /collection/{shortcode}/answers:
    delete:
      tags:
      - "internal"
      summary: "Remove any saved answers for a collection"
      operationId: "Collection::reset"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "shortcode"
        description: "Shortcode of collection"
        required: true
        type: "string"
      responses:
        204:
          description: "Answers removed"
        400:
          description: "Validation exception"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Collection not found"
          schema:
            $ref: "#/definitions/Error"



#----------------------------------------------------------------------

definitions:

  VersionResponse:
    description: "Reply to POST /version"
    type: "object"
    properties:
      git:
        description: ""
        type: "object"
        properties:
          tag:
            description: "The actual version number."
            type: "string"
          sha:
            description: "The git commit sha of the release."
            type: "string"
          date:
            description: "The date of the git commit."
            type: "string"
      built:
        description: "The date the release was built."
        type: "string"

  CollectionLinkRequest:
    description: "Request for POST /collection"
    type: "object"
    properties:
      measure:
        $ref: "#/definitions/MeasureType"
      email:
        description: "Email address to send the link to."
        type: "string"
        x-nullable: true
      sms:
        description: "Phone number to send the link to."
        type: "string"
        x-nullable: true
      postback_url:
        description: "URI to POST results and payload when measure is completed"
        type: "string"
      payload:
        description: "JWT or Integer payload to include with postback"
        type: "string"
    required:
    - measure

  CollectionLinkResponse:
    description: "Reply to POST /collection"
    type: "object"
    properties:
      uuid:
        type: "string"
        description: "Permanent UUID to identify collection"
      shortcode:
        type: "string"
        description: "Short code for accessing collection"
      link:
        type: "string"
        description: "URI for client to access collection"
      qr_code_url:
        type: "string"
        description: "URI for QR code to access collection"
      qr_code_image:
        type: "string"
        description: "URI for QR code to access collection"
    required:
    - uuid
    - shortcode
    - link
    - qr_code_url

  Measure:
    description: "Reply to GET /measure/{measure}"
    type: "object"
    properties:
      measure:
        $ref: "#/definitions/MeasureType"
      questions:
        type: "array"
        items:
          $ref: "#/definitions/Question"

  Question:
    description: "Questions included in reply to GET /measure/{measure}"
    type: "object"
    properties:
      question_id:
        type: "integer"
        example: 1
        description: "Internal Question ID (globally unique across all measures)"
      question_number:
        type: "integer"
        example: 1
        description: "Measure-based question number (unique per measure)"
      text:
        type: "string"
        example: "What is your favorite color?"
      type:
        type: "string"
        enum:
        - "radio"     # Options required
        - "checkbox"  # Options required
        - "boolean"   # Two options required
        - "number"
        - "text"
        - "longtext"
      options:
        type: "array"
        items:
          $ref: "#/definitions/QuestionOptions"

  QuestionOptions:
    description: "Valid options for questions included in GET /measure/{measure}"
    type: "object"
    required:
      - "value"
      - "text"
    properties:
      value:
        type: "string"
        example: "never"
      text:
        type: "string"
        example: "I never experience this"
      options:
        type: "object"

  Collection:
    description: "Response payload for GET /collection/{shortcode}"
    type: "object"
    properties:
      shortcode:
        type: "string"
        example: "AZ947"
      answers:
        type: "object"
        example: '{ "12": { "response": "orange" }, "14" : { "response": "7" } }'
      measure_type:
        $ref: "#/definitions/MeasureType"
      status:
        type: "string"
        enum:
          - created
          - opened
          - saved
          - submitted
          - reported
          - expired
      measure:
        $ref: "#/definitions/Measure"

  CollectionAnswer:
    description: "Client response to a single question"
    type: "object"
    properties:
      question_id:
        type: "integer"
        example: 1
        description: "Internal Question ID (globally unique across all measures)"
      question_number:
        type: "integer"
        example: 1
        description: "Measure-based question number (unique per measure)"
      response:
        type: "string"
        example: "never"
    required:
    - "question_id"
    - "response"

  CollectionScore:
    description: "Collection Score"
    type: "object"
    properties:
      type:
        type: "string"
        example: total
      score:
        type: "integer"
        example: 22

  CompleteCollection:
    description: "Response payload for GET /collection/{uuid}/result"
    type: "object"
    properties:
      shortcode:
        type: "string"
        example: "AZ947"
      uuid:
        type: "string"
        example: "b7dcc876-dd12-4b93-94ec-e8104321088d"
      measure_type:
        $ref: "#/definitions/MeasureType"
      questions:
        type: "array"
        items:
          $ref: "#/definitions/Question"
      answers:
        type: "object"
        example: '{ "12": { "response": "orange" }, "14" : { "response": "7" } }'
      scores:
        type: "array"
        items:
          $ref: "#/definitions/CollectionScore"
      first_opened_utc:
        type: "string"
        example: "2018-04-01T12:34:55Z"
        description: "Date/time in ISO-8601 format that the client first opened the collection"
      submitted_utc:
        type: "string"
        example: "2018-04-01T12:34:55Z"
        description: "Date/time in ISO-8601 format that the client submitted the collection"


  MeasureType:
    description: "Type of measure"
    type: string
    enum:
      - k5
      - k10p
      - sidas
      #- sdq-pc1
      #- sdq-pc2
      #- sdq-py1
      #- sdq-py2
      #- sdq-yr1
      #- sdq-yr2

  Error:
    type: "string"
